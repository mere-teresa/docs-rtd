#. `eZ Publish Platform 5.<next> <index.html>`__
#. `eZ Publish Platform
   Documentation <eZ-Publish-Platform-Documentation_1114149.html>`__
#. `Development & Administration Guides <6291674.html>`__
#. `Developing with eZ Publish
   5 <Developing-with-eZ-Publish-5_2720528.html>`__
#. `Developer Cookbook <Developer-Cookbook_11403951.html>`__

eZ Publish Platform 5.<next> : How to customize UserHash generation
===================================================================

Added by jerome.vieilledent@ez.no , edited by jerome.vieilledent@ez.no
on Sep 11, 2013

Version compatibility

Icon

This recipe is compatible with \ **eZ Publish 5.2 / 2013.07**

-  `Description <#HowtocustomizeUserHashgeneration-Description>`__
-  `Example <#HowtocustomizeUserHashgeneration-Example>`__
-  `Securing hash generation
   request <#HowtocustomizeUserHashgeneration-Securinghashgenerationrequest>`__

Icon

Be sure to have read `Context aware HTTP
cache <Context-aware-HTTP-cache_14712846.html>`__ documentation before
reading this recipe.

Description
-----------

When user hash generation is requested, eZ Publish will create
a \ **hashable User Identity** object.

One can add information to the Identity object making the resulted hash
vary. This can be done by registering \ **Identity definers**.

For this, all you need to do is to declare a service with
**``ezpublish.identity_definer``** tag. Class for this
service \ **must** implement **``eZ\Publish\SPI\User\IdentityAware``** interface.

Example
-------

**services.yml (inside a bundle)**

.. code:: theme:

    parameters:
        my_identity_definer.class: Acme\TestBundle\Identity\MyDefiner
     
    services:
        my_identity_definer:
            class: %my_identity_definer.class%
            tags:
                - { name: ezpublish.identity_definer }

.. code:: theme:

    <?php

    namespace Acme\TestBundle\Identity;

    use eZ\Publish\SPI\User\IdentityAware;
    use eZ\Publish\SPI\User\Identity;

    class MyDefiner implements IdentityAware
    {
        public function setIdentity( Identity $identity )
        {
            // Here I can add information to $identity.
            // value MUST be scalar.
            $identity->setInformation( 'my_key', 'my_value' );
        }
    }

Securing hash generation request
--------------------------------

By default, hash generation requests are granted for localhost
(``127.0.0.1``, \ ``::1``, \ ``fe80::1``).

If you want to enlarge the scope (e.g. if your Varnish server is not
running on the same machine), you can
override \ ``canGenerateUserHash()`` protected method in your main
kernel class (mostly ``EzPublishKernel``).

Document generated by Confluence on Feb 12, 2014 16:43
