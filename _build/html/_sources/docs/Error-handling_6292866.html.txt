#. `eZ Publish Platform 5.<next> <index.html>`__
#. `eZ Publish Platform
   Documentation <eZ-Publish-Platform-Documentation_1114149.html>`__
#. `Development & Administration Guides <6291674.html>`__
#. `eZ Publish REST API <eZ-Publish-REST-API_6292277.html>`__

eZ Publish Platform 5.<next> : Error handling
=============================================

Added by bertrand.dunogier@ez.no , edited by gaetano.giunta@ez.no on Jul
20, 2013

Error handling in the REST API is fully based on HTTP error codes. As a
web developer, you are probably familiar with the most common ones: 401
Unauthorized, 404 Not Found or 500 Internal Server Error. The REST API
uses those, along with a few more, to allow proper error handling.

The complete list of error codes used and the conditions in which they
apply are specified in the `reference
documentation <https://github.com/ezsystems/ezpublish-kernel/blob/master/doc/specifications/rest/REST-API-V2.rst>`__.

General error codes
-------------------

A few error codes apply to most resources (if they \ *are* applicable)

500 Internal Server Error
~~~~~~~~~~~~~~~~~~~~~~~~~

The server encountered an unexpected condition, usually an exception,
which prevented it from fulfilling the request: database down,
permissions or configuration error.

501 Not Implemented
~~~~~~~~~~~~~~~~~~~

Returned when the requested method has not yet been implemented. As of
eZ Publish 5.0, most of user, group, content, location and content type
have been implemented. Some of their methods, as well as other features,
may return a 501.

404 Not Found
~~~~~~~~~~~~~

Returned when the request failed because the request object was not
found. You should be familiar with this one.

405 Method Not Allowed
~~~~~~~~~~~~~~~~~~~~~~

Returned when the requested REST API resource doesn't support the HTTP
verb that was used.

406 Not Acceptable
~~~~~~~~~~~~~~~~~~

Returned when an accept header sent with the requested isn't supported.

Error handling in your REST implementation
------------------------------------------

It is up to you, in your client implementation, to handle those codes by
checking if an error code (4xx or 5xx) was returned instead of the
expected 2xx or 3xx.

Document generated by Confluence on Feb 12, 2014 16:43
