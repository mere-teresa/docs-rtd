#. `eZ Publish Platform 5.<next> <index.html>`__
#. `eZ Publish Platform
   Documentation <eZ-Publish-Platform-Documentation_1114149.html>`__
#. `Development & Administration Guides <6291674.html>`__
#. `Developing with eZ Publish
   5 <Developing-with-eZ-Publish-5_2720528.html>`__
#. `MVC and Application <MVC-and-Application_2719826.html>`__
#. `Events <Events_2720028.html>`__

eZ Publish Platform 5.<next> : Legacy kernel event
==================================================

Added by andre.romcke@ez.no , edited by ricardo.correia@ez.no on May 21,
2013

For better integration between 5.x (symfony based) kernel and legacy
(4.x) kernel, injection is used to inject
`settings <Legacy-configuration-injection_8323268.html>`__,
`session <Legacy-session-injection_8323285.html>`__ and `current
siteaccess <Legacy-siteaccess-injection_8323272.html>`__ from 5.x into
legacy using an event: kernel.event\_subscriber

This page describe how you can do that.  

Adding a kernel.event\_subscriber
---------------------------------

| A legacy kernel event subscriber is added by tagging your event
subscriber service.
| Bellow is an example of yml configuration involved:

**kernel.event\_subscriber**

.. code:: theme:

        my_app.legacy_mapper.something:
            class: %my_app.legacy_mapper.something.class%
            arguments: [@service_container]
            tags:
                - { name: kernel.event_subscriber }

 

The class refered to as %my\_app.legacy\_mapper.something.class% can
look like this:

**my\_app.legacy\_mapper.something.class**

.. code:: theme:

    namespace MyApp\LegacyMapper;
    use eZ\Publish\Core\MVC\Legacy\LegacyEvents;
    use eZ\Publish\Core\MVC\Legacy\Event\PreBuildKernelWebHandlerEvent;
    use Symfony\Component\EventDispatcher\EventSubscriberInterface;
    use Symfony\Component\DependencyInjection\ContainerInterface;
    /**
     * Maps something into Legacy kernel
     */
    class Something implements EventSubscriberInterface
    {
        /**
         * @var \Symfony\Component\DependencyInjection\ContainerInterface
         */
        private $container;
     
       /**
        * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
        */
        public function __construct( ContainerInterface $container )
        {
            $this->container = $container;
        }
        public static function getSubscribedEvents()
        {
            return array(
                LegacyEvents::PRE_BUILD_LEGACY_KERNEL_WEB => array( 'onBuildKernelWebHandler', 128 )
            );
        }
        /**
         * Maps matched siteaccess to the legacy parameters
         *
         * @param \eZ\Publish\Core\MVC\Legacy\Event\PreBuildKernelWebHandlerEvent $event
         *
         * @return void
         */
        public function onBuildKernelWebHandler( PreBuildKernelWebHandlerEvent $event )
        {
            // Do something, see eZ\Bundle\EzPublishLegacyBundle\LegacyMapper\* for examples
            // Example for injecting some settings:
     
            $settings = array(
                'site.ini/Block/Setting' => $this->container->getParameter( 'some.setting' ),
                'site.ini/Block/Setting2' => $this->configResolver->getParameter( 'some.setting2' )
            );
     
            $event->getParameters()->set(
                "injected-settings",
                $settings + (array)$event->getParameters()->get( "injected-settings" )
            );
        }
    }

| 

Document generated by Confluence on Feb 12, 2014 16:43
