#. `eZ Publish Platform 5.<next> <index.html>`__
#. `eZ Publish Platform
   Documentation <eZ-Publish-Platform-Documentation_1114149.html>`__
#. `Development & Administration Guides <6291674.html>`__
#. `eZ Publish Public API <eZ-Publish-Public-API_1736723.html>`__
#. `Public API Cookbook <Public-API-Cookbook_5046311.html>`__

eZ Publish Platform 5.<next> : 2. Browsing, finding, viewing
============================================================

Added by bertrand.dunogier@ez.no , edited by ricardo.correia@ez.no on
Jan 31, 2014

We will start by going through the various ways to find and retrieve
content from eZ Publish using the API. While this will be covered in
further dedicated documentation, it is necessary to explain a few basic
concepts of the Public API. In the following recipes, you will learn
about the general principles of the API as they are introduced in
individual recipes.

-  `Displaying values from a
   Content <#id-2.Browsing%2Cfinding%2Cviewing-DisplayingvaluesfromaContent>`__
-  `Traversing a Location
   subtree <#id-2.Browsing%2Cfinding%2Cviewing-TraversingaLocationsubtree>`__
-  `Viewing Content Meta
   Data <#id-2.Browsing%2Cfinding%2Cviewing-ViewingContentMetaData>`__

   -  `Setting the Repository
      User <#id-2.Browsing%2Cfinding%2Cviewing-SettingtheRepositoryUser>`__
   -  `The ContentInfo Value
      Object <#id-2.Browsing%2Cfinding%2Cviewing-TheContentInfoValueObject>`__
   -  `Locations <#id-2.Browsing%2Cfinding%2Cviewing-Locations>`__
   -  `Relations <#id-2.Browsing%2Cfinding%2Cviewing-Relations>`__
   -  `ContentInfo
      properties <#id-2.Browsing%2Cfinding%2Cviewing-ContentInfoproperties>`__
   -  `Owning user <#id-2.Browsing%2Cfinding%2Cviewing-Owninguser>`__
   -  `Section <#id-2.Browsing%2Cfinding%2Cviewing-Section>`__
   -  `Versions <#id-2.Browsing%2Cfinding%2Cviewing-Versions>`__

-  `Search <#id-2.Browsing%2Cfinding%2Cviewing-Search>`__

   -  `Performing a simple full text
      search <#id-2.Browsing%2Cfinding%2Cviewing-Performingasimplefulltextsearch>`__

      -  `Query and Criterion
         objects <#id-2.Browsing%2Cfinding%2Cviewing-QueryandCriterionobjects>`__
      -  `Running the search query and using the
         results <#id-2.Browsing%2Cfinding%2Cviewing-Runningthesearchqueryandusingtheresults>`__

   -  `Performing an advanced
      search <#id-2.Browsing%2Cfinding%2Cviewing-Performinganadvancedsearch>`__
   -  `Performing a fetch like
      search <#id-2.Browsing%2Cfinding%2Cviewing-Performingafetchlikesearch>`__

      -  `Using in() instead of
         OR <#id-2.Browsing%2Cfinding%2Cviewing-Usingin%28%29insteadofOR>`__

   -  `Performing a pure search
      count <#id-2.Browsing%2Cfinding%2Cviewing-Performingapuresearchcount>`__

Displaying values from a Content
--------------------------------

In this recipe, we will see how to fetch a Content instance from the
repository, and obtain its Field's content. 

Let's first see the full code. You can see the Command line version
at \ `https://github.com/ezsystems/CookbookBundle/blob/master/Command/ViewContentCommand.php <https://github.com/ezsystems/CookbookBundle/blob/master/Command/ViewContentCommand.php>`__.

**Viewing content**

.. code:: theme:

    $repository = $this->getContainer()->get( 'ezpublish.api.repository' );
    $contentService = $repository->getContentService();
    $contentTypeService = $this->getRepository()->getContentTypeService();
    $fieldTypeService = $repository->getFieldTypeService();

    try
    {
        $content = $contentService->loadContent( 66 );
        $contentType = $contentTypeService->loadContentType( $content->contentInfo->contentTypeId );
        // iterate over the field definitions of the content type and print out each field's identifier and value
        foreach( $contentType->fieldDefinitions as $fieldDefinition )
        {
            $output->write( $fieldDefinition->identifier . ": " );
            $fieldType = $fieldTypeService->getFieldType( $fieldDefinition->fieldTypeIdentifier );
            $field = $content->getFieldValue( $fieldDefinition->identifier );

            // We use the Field's toHash() method to get readable content out of the Field
            $valueHash = $fieldType->toHash( $field->value );
            $output->writeln( $valueHash );
        }
    }
    catch( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e )
    {
        // if the id is not found
        $output->writeln( "No content with id $contentId" );
    }
    catch( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
    {
        // not allowed to read this content
        $output->writeln( "Anonymous users are not allowed to read content with id $contentId" );
    }

Let's analyze this code block by block.

.. code:: theme:

    $repository = $this->getContainer()->get( 'ezpublish.api.repository' );
    $contentService = $repository->getContentService();
    $contentTypeService = $this->getRepository()->getContentTypeService();
    $fieldTypeService = $repository->getFieldTypeService();

This is the initialization part. As explained above, everything in the
Public API goes through the repository via dedicated services. We get
the repository from the service container, using the
method \ ``get()`` of our container, obtained
via \ ``$this->getContainer()``. Using our $repository variable, we
fetch the two services we will need
using \ ``getContentService()`` and ``getFieldTypeService()``.

.. code:: first-line:

    try
    {
        // iterate over the field definitions of the content type and print out each field's identifier and value
        $content = $contentService->loadContent( 66 );

Everything starting from line 5 is about getting our Content and
iterating over its Fields. You can see that the whole logic is part of
a \ ``try/catch`` block. Since the Public API uses Exceptions for error
handling, this is strongly encouraged, as it will allow you to
conditionally catch the various errors that may happen. We will cover
the exceptions we expect in a next paragraph.

The first thing we do is use the Content Service to load a Content using
its ID, 66: \ ``$contentService->loadContent``\ ``( 66 )``. As you can
see on the API doc page, this method expects a Content ID, and returns
a \ `Content Value
Object <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Content.html>`__.

.. code:: theme:

    foreach( $contentType->fieldDefinitions as $fieldDefinition )
    {
        // ignore ezpage
        if( $fieldDefinition->fieldTypeIdentifier == 'ezpage' )
            continue;
        $output->write( $fieldDefinition->identifier . ": " );
        $fieldType = $fieldTypeService->getFieldType( $fieldDefinition->fieldTypeIdentifier );
        $fieldValue = $content->getFieldValue( $fieldDefinition->identifier );
        $valueHash = $fieldType->toHash( $fieldValue );
        $output->writeln( $valueHash );
    }

This block is the one that actually displays the value.

It iterates over the Content's (Content Object) fields using the
ContentType's (Content Class) FieldDefinitions (Content Class Attribute)
(``$contentType->fieldDefinitions``).

For each Field Definition (Content Class Attribute), we start by
displaying its identifier (``$fieldDefinition->identifier``). We then
get the FieldType (Datatype) instance using the FieldType Service
(``$fieldTypeService->getFieldType( $fieldDefinition->fieldTypeIdentifier )``).
This method expects the requested FieldType's identifier, as a string
(ezstring, ezxmltext...), and returns
an \ ``eZ\Publish\API\Repository\FieldType`` object.

The Field Value object (Content Object Attribute) is obtained using
the \ ``getFieldValue()`` method of the Content Value Object which we
obtained using \ ``ContentService::loadContent()``.

Using the FieldType object, we can convert the Field Value to a hash
using the \ ``toHash()`` method, provided by every FieldType. This
method returns a primitive type (string, hash) out of a Field instance.

With this example, you should get a first idea on how you interact with
the API. Everything is done through services, each service being
responsible for a specific part of the repository (Content, FieldType,
etc).

Loading Content in different languages

Icon

Since we didn't specify any language code, our Field objects is returned
in the default language, depending on your language settings in
``ezpublish.yml``. If you want to use a non-default language, you can
specify a language code in the ``getField()`` call:

.. code:: theme:

    $content->getFieldValue( $fieldDefinition->identifier, 'fre-FR' )

**Exceptions handling**

.. code:: theme:

    catch ( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e )
    {
        $output->writeln( "<error>No content with id $contentId found</error>" );
    }
    catch ( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
    {
        $output->writeln( "<error>Permission denied on content with id $contentId</error>" );
    }

As said earlier, the Public API
uses \ `Exceptions <http://php.net/exceptions>`__ to handle errors. Each
method of the API may throw different exceptions, depending on what it
does. Which exceptions can be thrown is usually documented for each
method. In our case, \ ``loadContent()`` may throw two types of
exceptions: \ ``NotFoundException``, if the requested ID isn't found,
and \ ``UnauthorizedException`` if the currently logged in user isn't
allowed to view the requested content.

It is a good practice to cover each exception you expect to happen. In
this case, since our Command takes the content ID as a parameter, this
ID may either not exist, or the referenced content may not be visible to
our user. Both cases are covered with explicit error messages.

Traversing a Location subtree
-----------------------------

This recipe will show how to traverse a Location's subtree. The full
code implements a command that takes a Location ID as an argument, and
recursively prints this location's subtree.

Full code

Icon

`https://github.com/ezsystems/CookbookBundle/blob/master/Command/BrowseLocationsCommand.php <https://github.com/ezsystems/CookbookBundle/blob/master/Command/BrowseLocationsCommand.php>`__

In this code, we introduce the
`LocationService <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/LocationService.html>`__.
This service is used to interact with locations (eZ Publish 4 nodes). We
use two methods from this service:
```loadLocation()`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/LocationService.html#method_loadLocation>`__,
and ``loadLocationChildren()``.

**Loading a location**

.. code:: theme:

    try
    {
        // load the starting location and browse
        $location = $this->locationService->loadLocation( $locationId );
        $this->browseLocation( $location, $output );
    }
    catch ( \eZ\Publish\API\Repository\Exceptions\NotFoundException $e )
    {
        $output->writeln( "<error>No location found with id $locationId</error>" );
    }
    catch( \eZ\Publish\API\Repository\Exceptions\UnauthorizedException $e )
    {
        $output->writeln( "<error>Current users are not allowed to read location with id $locationId</error>" );
    }

As for the ContentService, ``loadLocation()`` returns a  Value Object,
here a ``Location``. Errors are handled with exceptions:
``NotFoundException`` if the Location ID couldn't be found,
and \ ``UnauthorizedException`` if the current repository user isn't
allowed to view this location.

**Iterating over a Location's children**

.. code:: theme:

    private function browseLocation( Location $location, OutputInterface $output, $depth = 0 )
    {
        $childLocationList = $this->locationService->loadLocationChildren( $location, $offset = 0, $limit = -1 );
        // If offset and limit had been specified to something else then "all", then $childLocationList->totalCount contains the total count for iteration use
        foreach ( $childLocationList->locations as $childLocation )
        {
            $this->browseLocation( $childLocation, $output, $depth + 1 );
        }
    }

``LocationService::loadLocationChildren()`` returns
a \ `LocationList <https://github.com/ezsystems/ezpublish-kernel/blob/master/eZ/Publish/API/Repository/Values/Content/LocationList.php>`__ Value
Objects that we can iterate over.

Note that unlike loadLocation(), we don't need to care for permissions
here: the currently logged in user's permissions will be respected when
loading children, and locations that can't be viewed won't be returned
at all.

Full code

Icon

Should you need more advanced children fetching methods,
the \ ``SearchService`` is what you are looking for.

Viewing Content Meta Data
-------------------------

Content is a central piece in the Public API. You will often need to
start from a Content, and dig in from its metadata. Basic content
metadata is made available through ``ContentInfo`` objects. This Value
Object mostly provides primitive fields: ``contentTypeId``,
``publishedDate`` or ``mainLocationId``. But it is also used to request
further Content related Value Objects from various services.

The full example implements an
``ezpublish:cookbook:view_content_metadata`` command that prints out all
the available metadata, given a content ID.

Full code

Icon

`https://github.com/ezsystems/CookbookBundle/blob/master/Command/ViewContentMetaDataCommand.php <https://github.com/ezsystems/CookbookBundle/blob/master/Command/ViewContentMetaDataCommand.php>`__

We introduce here several new services:
```URLAliasService`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/URLAliasService.html>`__,
```UserService`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/UserService.html>`__
and
```SectionService`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/SectionService.html>`__.
The concept should be familiar to you now.

**Services initialization**

.. code:: theme:

    /** @var $repository \eZ\Publish\API\Repository\Repository */
    $repository = $this->getContainer()->get( 'ezpublish.api.repository' );
    $contentService = $repository->getContentService();
    $locationService = $repository->getLocationService();
    $urlAliasService = $repository->getURLAliasService();
    $sectionService = $repository->getSectionService();
    $userService = $repository->getUserService();

Setting the Repository User
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Icon

In a command line script, the repository runs as if executed by the
anonymous user. In order to identify it as a different user, you need to
use the ``UserService`` as follows:

.. code:: theme:

    $administratorUser = $userService->loadUser( 14 );
    $repository->setCurrentUser( $administratorUser );

This may be crucial when writing maintenance or synchronization scripts.

This is of course not required in template functions or controller code,
as the HTTP layer will take care of identifying the user, and
automatically set it in the repository.

The ContentInfo Value Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We will now load a ``ContentInfo`` object using the provided ID and use
it to get our Content's meta data

.. code:: theme:

    $contentInfo = $contentService->loadContentInfo( $contentId );

Locations
~~~~~~~~~

**Getting Content Locations**

.. code:: theme:

    // show all locations of the content
    $locations = $locationService->loadLocations( $contentInfo );
    $output->writeln( "<info>LOCATIONS</info>" );
    foreach ( $locations as $location )
    {
        $urlAlias = $urlAliasService->reverseLookup( $location );
        $output->writeln( "  $location->pathString  ($urlAlias->path)" );
    }

We first use \ ``LocationService::loadLocations()`` to **get** the
**Locations** for our ``ContentInfo``. This method returns an array of
```Location`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Location.html>`__
Value Objects. In this example, we print out the Location's path string
(/path/to/content). We also use
`URLAliasService::reverseLookup() <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/URLAliasService.html#method_reverseLookup>`__
to get the location's main
`URLAlias <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/URLAlias.html>`__.

Relations
~~~~~~~~~

We now want to list relations from and to our Content. Since relations
are versioned, we need to feed the
```ContentService::loadRelations()`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentService.html#method_loadRelations>`__
with a ``VersionInfo`` object. We can get the current
version's \ ``VersionInfo`` using ```ContentService::loadVersionInfo()`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/ContentService.html#method_loadVersionInfo>`__.
If we had been looking for an archived version, we could have specified
the version number as the second argument to this method.

**Browsing a Content's relations**

.. code:: theme:

    // show all relations of the current version
    $versionInfo = $contentService->loadVersionInfo( $contentInfo );
    $relations = $contentService->loadRelations( $versionInfo );
    if ( count( $relations ) )
    {
        $output->writeln( "<info>RELATIONS</info>" );
        foreach ( $relations as $relation )
        {
            $name = $relation->destinationContentInfo->name;
            $output->write( "  Relation of type " . $this->outputRelationType( $relation->type ) . " to content $name" );
        }
    }

We can iterate over the
`Relation <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Relation.html>`__
objects array we got from loadRelations(), and use these Value Objects
to get data about our relations. It has two main properties:
destinationContentInfo, and sourceContentInfo. They also hold the
relation type (embed, common...), and the optional Field this relations
is made with.

ContentInfo properties
~~~~~~~~~~~~~~~~~~~~~~

We can of course get our Content's metadata by using the Value Object's
properties.

**Primitive object metadata**

.. code:: theme:

    // show meta data
    $output->writeln( "\n<info>METADATA</info>" );
    $output->writeln( "  <info>Name:</info> " . $contentInfo->name );
    $output->writeln( "  <info>Type:</info> " . $contentType->identifier );
    $output->writeln( "  <info>Last modified:</info> " . $contentInfo->modificationDate->format( 'Y-m-d' ) );
    $output->writeln( "  <info>Published:</info> ". $contentInfo->publishedDate->format( 'Y-m-d' ) );
    $output->writeln( "  <info>RemoteId:</info> $contentInfo->remoteId" );
    $output->writeln( "  <info>Main Language:</info> $contentInfo->mainLanguageCode" );
    $output->writeln( "  <info>Always available:</info> " . ( $contentInfo->alwaysAvailable ? 'Yes' : 'No' ) );

Owning user
~~~~~~~~~~~

We can use
```UserService::loadUser()`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/UserService.html#method_loadUser>`__
with content ``ownerId`` property of our ``ContentInfo`` to load the
``Content``'s owner as a ``User`` Value Object.

.. code:: theme:

    $owner = $userService->loadUser( $contentInfo->ownerId );
    $output->writeln( "  <info>Owner:</info> " . $owner->contentInfo->name );

Icon

To get the current version's creator, and not the content's owner, you
need to use the ``creatorId`` property from the current version's
``VersionInfo`` object.

Section
~~~~~~~

The section's ID can be found in the ``sectionId`` property of the
``ContentInfo`` object. To get the matching Section Value Object, you
need to use the SectionService::loadSection() method.

.. code:: theme:

    $section = $sectionService->loadSection( $contentInfo->sectionId );
    $output->writeln( "  <info>Section:</info> $section->name" );

Versions
~~~~~~~~

To conclude we can also iterate over the Content's version, as
``VersionInfo`` Value Objects.

.. code:: theme:

    $versionInfoArray = $contentService->loadVersions( $contentInfo );
    if ( count( $versionInfoArray ) )
    {
        $output->writeln( "\n<info>VERSIONS</info>" );
        foreach ( $versionInfoArray as $versionInfo )
        {
            $creator = $userService->loadUser( $versionInfo->creatorId );
            $output->write( "  Version $versionInfo->versionNo " );
            $output->write( " by " . $creator->contentInfo->name );
            $output->writeln( " " . $this->outputStatus( $versionInfo->status ) . " " . $versionInfo->initialLanguageCode );
        }
    }

We use the ``ContentService::loadVersions()`` method, and get an array
of ``VersionInfo`` objects.

Search
------

In this section we will cover how
the \ ```SearchService`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/SearchService.html>`__ can
be used to search for Contentent, by using a
```Query`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query.html>`__ and
a combinations of
```Criteria`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion.html>`__
you will get
a \ ```SearchResult`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Search/SearchResult.html>`__ object
back containing list of Content and count of total hits. In the future
this object will also include facets, spell checking and "more like
this" when running on a backend that supports it (for instance Solr).

Performing a simple full text search
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Full code

Icon

`https://github.com/ezsystems/CookbookBundle/blob/master/Command/FindContentCommand.php <https://github.com/ezsystems/CookbookBundle/blob/master/Command/FindContentCommand.php>`__

In this recipe, we will run a simple full text search over every
compatible attribute.

Query and Criterion objects
^^^^^^^^^^^^^^^^^^^^^^^^^^^

We introduce here a new object: \ ``Query``. It is used to build up a
Content query based on a set of ``Criterion`` objects.

.. code:: theme:

    $query = new \eZ\Publish\API\Repository\Values\Content\Query();
    $query->criterion = new Query\Criterion\FullText( $text );

Multiple criteria can be grouped together using "logical criteria", such
as
`LogicalAnd <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalAnd.html>`__
or
`LogicalOr <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalOr.html>`__.
Since in this case we only want to run a text search, we simply use a
```FullText`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/FullText.html>`__
criterion object.

Icon

The full list of criteria can be found on your installation in the
following
directory \ `vendor/ezsystems/ezpublish-kernel/eZ/Publish/API/Repository/Values/Content/Query/Criterion <https://github.com/ezsystems/ezpublish-kernel/tree/master/eZ/Publish/API/Repository/Values/Content/Query/Criterion>`__.
Additionally you may look at integration tests like
`vendor/ezsystems/ezpublish-kernel/eZ/Publish/API/Repository/Tests/SearchServiceTest.php <https://github.com/ezsystems/ezpublish-kernel/blob/master/eZ/Publish/API/Repository/Tests/SearchServiceTest.php>`__
for more details on how these are used.

NB: Be aware that the links point to code in the upcoming version
(master) and might not represent the criteria in your eZ Publish
version.

 

Running the search query and using the results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``Query`` object is given as an argument to
```SearchService::findContent()`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/SearchService.html#method_findContent>`__.
This method returns a ``SearchResult`` object. This object provides you
with various information about the search operation (number of results,
time taken, spelling suggestions, or facets, as well as of course, the
results themselves.

.. code:: theme:

    $result = $searchService->findContent( $query );
    $output->writeln( 'Found ' . $result->totalCount . ' items' );
    foreach ( $result->searchHits as $searchHit )
    {
        $output->writeln( $searchHit->valueObject->contentInfo->name );
    }

The ``searchHits`` properties of the ``SearchResult`` object is an array
of SearchHit objects. In ``valueObject`` property of ``SearchHit``, you
will find the \ ``Content`` object that match the given ``Query``.

*Tip*: If you you are searching using a unique identifier, for instance
using the content id or content remote id criterion, then you can
use \ ```SearchService::findSingle()`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/SearchService.html#method_findSingle>`__,
this takes a Criterion and returns a single Content, or throws NotFound
exception if none is found.

Performing an advanced search
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Full code

Icon

`https://github.com/ezsystems/CookbookBundle/blob/master/Command/FindContent2Command.php <https://github.com/ezsystems/CookbookBundle/blob/master/Command/FindContent2Command.php>`__

As explained in the previous chapter, Criterion objects are grouped
together using Logical criteria. We will now see how multiple criteria
objects can be combined into a fine grained search ``Query``.

.. code:: theme:

    use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
    use eZ\Publish\API\Repository\Values\Content;
     
    // [...]
     
    $query = new Query();
    $criterion1 = new Criterion\Subtree( $locationService->loadLocation( 2 )->pathString );
    $criterion2 = new Criterion\ContentTypeIdentifier( 'folder' );
    $query->criterion = new Criterion\LogicalAnd(
        array( $criterion1, $criterion2 )
    );
     
    $result = $searchService->findContent( $query );

A
```Subtree`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/Subtree.html>`__
criterion limits the search to the subtree with pathString, which looks
like: \ ``/1/2/``. A
```ContentTypeId`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeId.html>`__
Criterion to limit the search to Content of ContentType 1. Those two
criteria are grouped with a ``LogicalAnd`` operator. The query is
executed as before, with ``SearchService::findContent()``.

Performing a fetch like search
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Full code

Icon

`https://github.com/ezsystems/CookbookBundle/blob/master/Command/FindContent3Command.php <https://github.com/ezsystems/CookbookBundle/blob/master/Command/FindContent3Command.php>`__

A search isn't only meant for searching, it also provides the future
interface for what you in eZ Publish 4.x would know as a content
"fetch". And as this is totally backend agnostic, in future eZ Publish
5.x versions this will be powered by either Solr or ElasticSearch
meaning it also replaces "ezfind" fetch functions.

Following the examples above we now change it a bit to combine several
criteria with both a AND and a OR condition.

.. code:: theme:

    use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
    use eZ\Publish\API\Repository\Values\Content;
     
    // [...]
     
    $query = new Query();
    $query->criterion = new Criterion\LogicalAnd(
        array(
            new Criterion\ParentLocationId( 2 ),
            new Criterion\LogicalOr(
                array(
                    new Criterion\ContentTypeIdentifier( 'folder' ),
                    new Criterion\ContentTypeId( 2 )
                )
            )
        )
    );
     
    $result = $searchService->findContent( $query );

A \ ``ParentLocationId`` criterion limits the search to the children of
location 2. An array of "``ContentTypeId"`` Criteria to limit the search
to Content of ContentType's with id 1 or 2 grouped in
a \ ``LogicalOr`` operator. Those two criteria are grouped with
a \ ``LogicalAnd`` operator. As always the query is executed as before,
with \ ``SearchService::findContent()``.

*Tip*: Want to do a subtree filter ( in 4.x: fetch( 'content', 'tree' )
)? Change the location filter to use the Subtree criterion filter as
shown in the advanced search example above.

Using in() instead of OR
^^^^^^^^^^^^^^^^^^^^^^^^

The above example is fine, but it can be optimized a bit by taking
advantage of the fact that all filter criteria support being given an
array of values (IN operator) instead of as single value (EQ operator).

If your on eZ Publish 5.1+ you can use the
new \ ```ContentTypeIdentifier`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeIdentifier.html>`__ Criterion:

**eZ Publish 5.1+ (2013.01+)**

.. code:: theme:

    use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
    use eZ\Publish\API\Repository\Values\Content;
     
    // [...]
     
    $query = new Query();
    $query->criterion = new Criterion\LogicalAnd(
        array(
            new Criterion\ParentLocationId( 2 ),
            new Criterion\ContentTypeIdentifier( array( 'article', 'folder' ) )
        )
    );
     
    $result = $searchService->findContent( $query );

*Tip*: All filter criteria are capable of doing an "IN" selection,
the ParentLocationId above could f.e. have been provided "array( 2, 43
)" to include second level children in both your content tree (2) and
your media tree (43). 

Performing a pure search count
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| In many cases you might need the number of contents matching a search,
but with no need to do anything else with the results.
| Thanks to the fact that the "searchHits" property of the
```SearchResult`` <http://apidoc.ez.no/sami/trunk/NS/html/eZ/Publish/API/Repository/Values/Content/Search/SearchResult.html>`__ object
always refers to the total amount, it is enough to run a standard search
and set $limit to 0. This way no results will be retrieved, and the
search will not be slowed down, even when the number of matching results
is huge.

 

.. code:: theme:

    use eZ\Publish\API\Repository\Values\Content\Query;
     
    // [...]
     
    $query = new Query();
    $query->limit = 0;
     
    // [...] ( Add criteria as shown above )
     
    $resultCount = $searchService->findContent( $query )->totalCount;

 

| 

Comments:
---------

"``$content``\ ``->contentType->fieldDefinitions" no longer works.``

instead one needs to do something like the following:

.. code:: theme:

    $content = $this->getRepository()->getContentService()->loadContent( $location->contentId );
    $contentType = $this->getRepository()->getContentTypeService()->loadContentType( $content->contentInfo->contentTypeId );

|image0| Posted by lsmith at Jul 08, 2013 10:38

Thanks Lukas, fixed now.

|image1| Posted by andre.romcke@ez.no at Jul 08, 2013 10:58

Hi,

Maybe you add this to documentation: when you're working on multisite
with one repository, you have to use the router service to generate
urlalias and not the service:

.. code:: theme:

    // This will generate: http://www.example.com/myfolder
    $this->container->get('router')->generate( $myLocation, array(), true );

    // This will generate: /my-site/myfolder
    $this->getRepository()->getURLAliasService()->listLocationAliases( $myLocation );

|image2| Posted by philippe.vincent-royol@ez.no at Aug 20, 2013 08:29

Document generated by Confluence on Feb 12, 2014 16:43

.. |image0| image:: images/icons/contenttypes/comment_16.png
.. |image1| image:: images/icons/contenttypes/comment_16.png
.. |image2| image:: images/icons/contenttypes/comment_16.png
